name: EPRX results

on:
  schedule:
    - cron: '0 14 28-31 * *'  # UTC 23:00 (JST) on 28thâ€“31st
  workflow_dispatch:

permissions:
  contents: write

jobs:
  scrape:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: '1'
    steps:
      - name: Sparse Checkout (excluding zip/)
        run: |
          git init
          git remote add origin https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git config core.sparseCheckout true
          echo "/*" > .git/info/sparse-checkout
          echo "!zip/" >> .git/info/sparse-checkout
          git pull origin main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            playwright-browsers-${{ runner.os }}-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          playwright install chromium

      - name: Calculate fiscal year
        id: fiscal_year
        run: |
          FISCAL_YEAR=$(date '+%Y')
          if [ $(date '+%m') -lt 4 ]; then
            FISCAL_YEAR=$((FISCAL_YEAR - 1))
          fi
          echo "FISCAL_YEAR=$FISCAL_YEAR" >> $GITHUB_ENV
          echo "Fiscal year: $FISCAL_YEAR"

      - name: Run EPRX results scraper
        run: python run_eprx_results.py "$FISCAL_YEAR"

      - name: Commit and push results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "dlxiii"
          git config --global user.email "tokyowangyulong@gmail.com"
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add --sparse zip/
          git commit -m "Auto commit EPRX results for ${FISCAL_YEAR}" || echo "No changes to commit"
          git push origin HEAD:main

      - name: Commit and push data to public repo opendenki/eprx
        env:
          TARGET_PAT: ${{ secrets.TARGET_REPO_PAT }}
        run: |
          git config --global user.name "OpenDenki Sync Bot"
          git config --global user.email "bot@opendenki.com"
          git clone https://x-access-token:${TARGET_PAT}@github.com/opendenki/eprx.git
          cd eprx
          mkdir -p ${FISCAL_YEAR}
          cp -r ../zip/${FISCAL_YEAR}_* ${FISCAL_YEAR}/
          git add .
          git commit -m "Auto sync EPRX results for ${FISCAL_YEAR}" || echo "No changes to commit"
          git push

      - name: Prepare CDN file names
        run: |
          python - <<'PYTHON' >> "$GITHUB_ENV"
          from datetime import date
          import os

          today = date.today()
          fiscal_year = os.environ.get("FISCAL_YEAR", today.strftime("%Y"))
          reserve_product_names = [
              "1-0",
              "1-1",
              "2-1",
              "2-2",
              "3-1",
              "3-2",
              "4-0",
              "tieline_daily",
              "tieline_weekly",
          ]

          if today.month == 12:
              next_year, next_month = today.year + 1, 1
          else:
              next_year, next_month = today.year, today.month + 1

          if today.month == 1:
              prev_year, prev_month = today.year - 1, 12
          else:
              prev_year, prev_month = today.year, today.month - 1

          repo = os.environ.get("GITHUB_REPOSITORY")
          links = []
          for reserve_product_name in reserve_product_names:
              prompt_folder = f"{fiscal_year}_{reserve_product_name}_prompt"
              result_folder = f"{fiscal_year}_{reserve_product_name}_result"
              prompt_file = f"{next_year}{next_month:02d}_{reserve_product_name}_prompt.csv"
              result_file = f"{prev_year}{prev_month:02d}_{reserve_product_name}_result.csv"
              links.append(
                  f"- https://cdn.jsdelivr.net/gh/{repo}@main/zip/{prompt_folder}/{prompt_file}"
              )
              links.append(
                  f"- https://cdn.jsdelivr.net/gh/{repo}@main/zip/{result_folder}/{result_file}"
              )

          print("CDN_LINKS<<EOF")
          print("\n".join(links))
          print("EOF")
          PYTHON

      - name: Send notification email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "OpenDenki_Data: EPRX Results Scrape for ${FISCAL_YEAR} completed"
          to: opendenki_data@googlegroups.com
          from: OpenDenki Bot <${{ secrets.SMTP_USERNAME }}>
          body: |
            EPRX results scraping job for fiscal year ${FISCAL_YEAR} has completed successfully.

            Files have been:
            - Saved in the repository under zip/
            - Committed back to the manager's repository
            - Pushed to public repo [opendenki/eprx](https://github.com/opendenki/eprx)

            jsDelivr CDN naming rules:
            - Folders: yyyy_<reserve_product_name>_prompt or yyyy_<reserve_product_name>_result
              where <reserve_product_name> is one of:
              1-0, 1-1, 2-1, 2-2, 3-1, 3-2, 4-0, tieline_daily, tieline_weekly
            - CSV files: yyyymm_<reserve_product_name>_prompt.csv (next month)
              or yyyymm_<reserve_product_name>_result.csv (previous month)

            jsDelivr CDN links:
            ${{ env.CDN_LINKS }}

            ðŸ“Ž View workflow logs:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
